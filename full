---
title: "final project 501"
author: "Daniel Vascones, Michael Dara, Chris Schwarm, Brandon Simonson"
date: "12/16/2021"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

##EDA and infrence 


#Create Boxplot for EDA comparing summary statistics of scores 
```{r}
load(url("http://people.math.binghamton.edu/qiao/data501/data/movies.RData"))
aud_df=data.frame("Audience",movies$audience_score)
colnames(aud_df)<-c("Person","Score")
crit_df=data.frame("Critics",movies$critics_score)
colnames(crit_df)<-c("Person","Score")
scores=rbind(aud_df,crit_df)
scores$Person<-as.factor(scores$Person)
means <- aggregate(Score ~  Person, scores, mean)
means$Score<-round(means$Score,digits=2)
```

```{r}
library(ggplot2)
box<-ggplot(scores, aes(x=Person, y=Score, color=Person))+geom_boxplot()+stat_summary(fun=mean)+geom_text(data=means, aes(label= Score, y=Score-5))
box
```

#Create Scatterplots comparing critic score and audience score
```{r}
graph<-ggplot(movies, aes(x=critics_score,y=audience_score))+geom_point()+geom_abline(slope=1,intercept = 0,color='blue',size=1.5)
graph
```

#Create Scatterplots comparing critic score and audience score over the years.
```{r}
aud_df2=data.frame("Audience",movies$audience_score,movies$thtr_rel_year)
colnames(aud_df2)<-c("Person","Score","Year")
crit_df2=data.frame("Critic",movies$critics_score,movies$thtr_rel_year)
colnames(crit_df2)<-c("Person","Score","Year")
scat<-rbind(aud_df2,crit_df2)
graph2<-ggplot(scat, aes(x=Year, y=Score,color=Person))+geom_point()+geom_smooth()
graph2
```

#Create Dataframe to summarize different variables for grouping statistics
```{r}
aud_df3=data.frame("Audience",movies$audience_score,movies$genre,movies$title_type,movies$mpaa_rating)
colnames(aud_df3)<-c("Person","Score","Genre","Title Type","MPAA Rating")
crit_df3=data.frame("Audience",movies$critics_score,movies$genre,movies$title_type,movies$mpaa_rating)
colnames(crit_df3)<-c("Person","Score","Genre","Title Type","MPAA Rating")
q3<-rbind(aud_df3,crit_df3)
```

#Apply summary statistics by groups
```{r}

tapply(q3$Score, q3$`MPAA Rating` ,summary)
tapply(q3$Score,q3$`Title Type`,summary)
```

#Boxplot of genre summary statistics
```{r}
graph3<-ggplot(q3, aes(y=Score,color=Genre ))+geom_boxplot()+theme(axis.ticks.x = element_blank(),axis.text.x = element_blank())
graph3
```



##Model 1
We start by loading the data. Creating the season factor turns the numerical value for month into a factor that represents the corresponding season. We are looking to predict critics score on Rotten Tomatoes, so we have to eliminate many predictors. Predictors that must be deleted include other ratings, score, urls, names of people, names of titles and studios. We omit NA's, then split the data into two sets to later test out our model. The first model we create is a multiple linear regression model to predict the critics score.
```{r}
load(url("http://people.math.binghamton.edu/qiao/data501/data/movies.RData"))
movies_alt=movies
movies_alt$season <- factor(ifelse(movies$thtr_rel_month %in% c(12,1,2), "Winter",
                        ifelse(movies$thtr_rel_month %in% c(3,4,5), "Spring",
                              ifelse(movies$thtr_rel_month %in% c(6,7,8), "Summer",
                                     ifelse(movies$thtr_rel_month %in% c(9,10,11), "Fall",
                                            NA)))))
df3 = subset(movies_alt, select = -c(imdb_rating, imdb_num_votes , critics_rating, audience_rating, audience_score, best_pic_nom, best_pic_win, top200_box, imdb_url, rt_url, actor1, actor2, actor3, actor4, actor5, director, title, studio, thtr_rel_month,thtr_rel_day, dvd_rel_month, dvd_rel_day))
df3=na.omit(df3)
set.seed(1234)
index = sample(c(rep(TRUE,442), rep(FALSE,200)))
SetA3=df3[index, ]
SetB3=df3[!index, ]
movies.lm.A3= lm(critics_score~. ,data=SetA3)
summary(movies.lm.A3)
```
## Dealing with colinearity
We test for colinearity through the use of condition indicies and vifs
```{r}
X = model.matrix(movies.lm.A3)[,-1]
R = cor(X)
ev = eigen(R)$val
sqrt(ev[1]*(ev)^(-1))
library(faraway)
faraway::vif(X)
```
It appears that the mpaa_ratings have colinearity with eachother, so we remove it from our model.
```{r}
movies.rm.A=lm(critics_score~. -mpaa_rating, data=SetA3)
summary(movies.rm.A)
X.rm = model.matrix(movies.rm.A)[,-1]
R.rm = cor(X.rm)
ev.rm = eigen(R.rm)$val
sqrt(ev.rm[1]*(ev.rm)^(-1))
library(faraway)
faraway::vif(X.rm)
```
We now inspect our residual plots and crPlots. The diagnostic plots seem fine, and the crPlots does not seem that the relation between the response and any of the predictors is beyond linear
```{r}
library(car)
plot(movies.rm.A)
par(mfrow = c(2,2))
crPlots(movies.rm.A)
```
We check to see if  there is a tranformation needed. since 1 is in our 95% confidence interval, there is no reason to transform the response
```{r}
MASS::boxcox(movies.rm.A)
MASS::boxcox(movies.rm.A, plotit=T, lambda= seq(.8,1.5, by=0.1))
```



```{r}
library(GGally)
library(car)
outlierTest(movies.rm.A)
```



We test our first model on our test set. we receive a square root mse of 25.27. Our response ranges from the value of 1 to 100, so the mse is not a bad result.
```{r}
mse.ols = mean((SetB3$critics_score - predict(movies.rm.A, SetB3))^2)              
sqrt(mse.ols)
```
We begin step-wise selection to see if we can find a better model
```{r}
forward_AIC = step(lm(critics_score~1, SetA3), list(upper = formula(movies.rm.A)), 
                    direction = 'forward', k = 2, trace = F)
 
formula(forward_AIC)
```
The model above removes dvd_rel_year, best_actor_win,  best_actress_win, and season from our original reduced model, the model below.
```{r}
formula(movies.rm.A)
```
We try some other step-wise selection methods to find which gives us the lowest mse.
```{r}
design.A = model.matrix(movies.rm.A)[,-1]
backward_AIC = step(movies.rm.A, list(lower= ~1), direction = 'backward', trace = F)
# 
forward_BIC = step(lm(critics_score~1, SetA3), list(upper = formula(movies.rm.A)), 
                    direction = 'forward', k = log(nrow(design.A)), trace = F)
backward_BIC = step(movies.rm.A,list(lower= ~1), direction = 'backward', k=log(nrow(design.A)), trace = F)
# 
both_BIC = step(lm(critics_score~1, SetA3), list(upper = formula(movies.rm.A), lower= ~ 1), 
                    direction = 'both', k = log(nrow(design.A)), trace = F)
```
These are the formulas for the step-wise selection models.
```{r}
formula(backward_AIC)
 formula(forward_BIC)
 formula(backward_BIC)
 formula(both_BIC)
 formula(forward_AIC)
```
These are the mse
```{r}
mse.ols = mean((SetB3$critics_score - predict(movies.rm.A, SetB3))^2)              
mse.search_back_aic = mean((SetB3$critics_score - predict(backward_AIC, SetB3))^2)  
mse.search_for_bic = mean((SetB3$critics_score - predict(forward_BIC, SetB3))^2) 
mse.search_back_bic = mean((SetB3$critics_score - predict(backward_BIC, SetB3))^2) 
mse.search_both_bic = mean((SetB3$critics_score - predict(both_BIC, SetB3))^2) 
                   
mse.search_for_aic = mean((SetB3$critics_score - predict(forward_AIC, SetB3))^2) 
                    
sqrt(data.frame(mse.ols,mse.search_back_aic,mse.search_for_bic,mse.search_back_bic, mse.search_both_bic, mse.search_for_aic))
```
We will choose the Backward AIC model because it includes the same predictors as most of the other models, while having the best prediction power.
Below are our residual plots for our first model and our chosen model. Each plot noticeably improves in our chosen model.
```{r}
par(mfrow=c(2,2))
plot(movies.lm.A)
plot(backward_AIC)
```
```{r}
formula(backward_AIC)
coef(backward_AIC)
```
We make a prediction for a feature film under the genre drama, released in theaters in 2021, a runtime of 120 minutes, and an oscar winning director.
Our model predicts that this movie would receive a critic score of 67.67% on Rotten Tomatoes.
```{r}
newdata=data.frame(genre="Drama", thtr_rel_year=2021, title_type="Feature Film" , runtime=120 , best_dir_win="yes")
(predict(backward_AIC, newdata))
```


##model2

Here we first created a movie seasons variable, in which movies were broken down by the season they were released in then factored. We then removed varibales are collected after the theatre release date. We also removed actor, director and title, because we decided that creating factors for each of these would become very messy, which is why we instead used actor award and director award to see if an actor or the director of a new movie has previosly won best actor or best director. 
```{r}
load(url("http://people.math.binghamton.edu/qiao/data501/data/movies.RData"))

movies$season <- factor(ifelse(movies$thtr_rel_month %in% c(12,1,2), "Winter",
                        ifelse(movies$thtr_rel_month %in% c(3,4,5), "Spring",
                              ifelse(movies$thtr_rel_month %in% c(6,7,8), "Summer",
                                     ifelse(movies$thtr_rel_month %in% c(9,10,11), "Fall",
                                            NA)))))
movies_alt2=movies
df2 = subset(movies_alt2, select = -c(imdb_num_votes, critics_rating, audience_rating, imdb_rating, critics_score, best_pic_nom, best_pic_win, top200_box, imdb_url, rt_url, actor1, actor2, actor3, actor4, actor5, director, title, thtr_rel_month, thtr_rel_day,dvd_rel_month,dvd_rel_day, studio, dvd_rel_year))



df2= na.omit(df2)
set.seed(1234)

index2 = sample(c(rep(TRUE,450), rep(FALSE,200)))
SetA2=df2[index2, ]
SetB2=df2[!index2, ]



movies.lm.A2= lm(audience_score~. ,data=SetA2)
summary(movies.lm.A2)

```
here we ran an outlier test in which no outliers were discovered
```{r}
library(car)
outlierTest(movies.lm.A2)
```
Here is the creation of the vif test to see if there is multicollinarity. Our results shows that there is multicolinarity in our mpaa_ratings so we decided to remove them from the model
```{r}
X2 = model.matrix(movies.lm.A2)[,-1]
R2 = cor(X2)
ev2 = eigen(R2)$val
sqrt(ev[1]*(ev2)^(-1))

library(faraway)
faraway::vif(X2)
```

## 

Here is the re running of the vif test in which we see no signs of multicollinarity anymore
```{r}
movies.rm.A2=lm(audience_score~. -mpaa_rating, data=SetA2)
summary(movies.rm.A2)


X.rm2 = model.matrix(movies.rm.A2)[,-1]
R.rm2 = cor(X.rm2)
ev.rm2 = eigen(R.rm2)$val
sqrt(ev.rm2[1]*(ev.rm2)^(-1))

library(faraway)
faraway::vif(X.rm2)


#movies.scale.X = scale(model.frame(movies.lm.A)[,-1])
#PCA = princomp(movies.scale.X, cor=TRUE)
#PCA$loadings  #loading matrix
#summary(PCA)  # variance
library(car)
outlierTest(movies.rm.A2)

```

Here is the diagnostic plots as well as the CrPlots for each variable. From here we see signs of non linearity in the residula vs fitted plot
```{r}
plot(movies.rm.A2)

par(mfrow = c(2,2))

car::crPlots(movies.rm.A2)
```
Here is the creation of the box cox transformation. Here we see that roughly 1.4 is the ideal transformation of our to optimize the linearity of our model.
```{r}

MASS::boxcox(movies.rm.A2)
MASS::boxcox(movies.rm.A2, plotit=T, lambda= seq(1.1,1.8, by=0.1))

movies.rml.A2<- lm(audience_score^(1.4)~. -mpaa_rating, data=SetA2)

```

here is the MSE for the OLS model
```{r}
mse.ols2 = mean((SetB2$audience_score - (predict(movies.rml.A2, SetB2))^(1/1.4))^2, na.rm=T)
sqrt(mse.ols2)
```
Here is the formula for the reduced model after the box cox transformation
```{r}
formula(movies.rml.A2)
```


Here is the creation all the AIC and BIC models for model selection 
```{r}
forward_AIC2 = step(lm(audience_score^(1.4)~1, SetA2), list(upper = formula(movies.rml.A2)), 
                    direction = 'forward', k = 2, trace = F)

backward_AIC2 = step(movies.rml.A2, list(lower= ~1), direction = 'backward', trace = F)

# 
forward_BIC2 = step(lm(audience_score^(1.4)~1, SetA2), list(upper = formula(movies.rml.A2)), 
                    direction = 'forward', k = log(nrow(design.A2)), trace = F)


backward_BIC2 = step(movies.rml.A2,list(lower= ~1), direction = 'backward', k=log(nrow(design.A2)), trace = F)
# 
both_BIC2 = step(lm(audience_score^(1.4)~1, SetA2), list(upper = formula(movies.rml.A2), lower= ~ 1), 
                    direction = 'both', k = log(nrow(design.A2)), trace = F)
```

Here displays the MSE of the AIC and BIC methods of model selection and from there the model with the lowest MSE is chosen. In this instance forward BIC is chosen,
```{r}
#MSE foward AIC
mse_F_AIC= mean((SetB2$audience_score -(predict(forward_AIC2, SetB2))^(1/1.4))^2)
sqrt(mse_F_AIC)
#MSE_B_AIC
mse_B_AIC= mean((SetB2$audience_score -(predict(backward_AIC2, SetB2))^(1/1.4))^2)
sqrt(mse_B_AIC)
#foward BIC MSE
mse_F_BIC= mean((SetB2$audience_score -(predict(forward_BIC2, SetB2))^(1/1.4))^2)
sqrt(mse_F_BIC)
#backward BIC
mse_B_BIC= mean((SetB2$audience_score - (predict(backward_BIC2, SetB2))^(1/1.4))^2)
sqrt(mse_B_BIC)
#both
mse_both_BIC2= mean((SetB2$audience_score - (predict(both_BIC2, SetB2))^(1/1.4))^2)
sqrt(mse_both_BIC2)
```
#this chunk displays the chosen formula from model selection and coef for each varible in that formula
```{r}
#formula(forward_AIC2)

#formula(backward_AIC2)
 formula(forward_BIC2)
 #formula(backward_BIC2)
 #formula(both_BIC2)
coef(forward_BIC2)
#summary(forward_BIC2)
```
Here we can see the the 4 diagnostic plots for our final model
```{r}
par(mfrow=c(2,2))
plot(forward_BIC2)
```
This chunk here uses the forward BIC model to predict the audience score for 2 specific movies. This is done by using the predict funciton to put the data into the fucntion and then we take that value and transoform it back out of its box cox transformation
```{r}
#prediction
newdata=data.frame(genre='Drama', best_dir_win='yes', thtr_rel_year= 2021)
predict(forward_BIC2, newdata)^(1/1.4)

newdata=data.frame(genre='Action & Adventure', best_dir_win='yes', thtr_rel_year= 2021)
predict(forward_BIC2, newdata)^(1/1.4)
```





Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
